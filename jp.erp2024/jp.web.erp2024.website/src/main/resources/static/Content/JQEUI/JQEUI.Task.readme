/*
 * JQEUI 扩展，批量异步任务模块
 *
 * 作者:孙亮
 *
 * --------------------------------------------------------------------------------------------------------------------------------
 * 参数:
 *   var task=JQEUI.task({
 *      args: [],								//每一个任务参数
 *      onRun: function (arg, index) { },		//回调函数
 *      onSuccess:  function (state) { },		//[可选参数]全部成功时候执行
 *      onError:  function (state) { },			//[可选参数]失败（有失败的就认为失败）时候执行
 *      onComplete: function (state) { },		//[可选参数]完成时候（不管成功失败）执行
 *      onProgress:  function (state) { },		//[可选参数]每一项完成时候执行
 *      interval: 0,							//[可选参数]间隔,如果启用间隔将取消并发执行，改为顺序执行。默认值0
 *      maxConcurrent:0,						//[可选参数]最大并发数量（interval=0时候有效）
 *      filter: function (json, status, xhr) {	//[可选参数]返回数据filter，判断什么条件的为成功数据
 *			return json && status == "success"; 
 *      },
 *      dialog: {								//[可选参数]对话框,不显示对话框可设置为 dialog: false
 *          options: {},						//[可选参数]对话框参数
 *          autoClose: false,					//[可选参数]任务结束是否自动关闭对话框
 *          mask: true,							//[可选参数]是否显示遮罩
 *          onCreate: {},						//[可选参数]在对话框创建时候调用
 *          onClose: {},						//[可选参数]在对话框关闭时候调用
 *          formatter: function (state) {       //[可选参数]消息消息记录格式化器
 *              var json = state.data;
 *              if (!json) json = { "Message": "未知错误！" };
 *
 *              return json["Message"] || json["message"] || json;
 *          },
 *          message: true						//[可选参数]是否显示详细任务记录
 *      }
 *   });
 *   
 *	 task的方法:
 *	 	run()
 *	 	dialog("show/hide/close")
 * -----------------------------------------------------------------------------------------------------------------------
 * 用法（推荐方法3）：
 *
 *   //方式1：精简模式
 *   JQEUI.task(["a", "b", "c"], function (data, index) {
 *       return $.ajax({
 *           url: index == 1 ? "http://a.com" : "http://pms.tidebuy.net/Api/Brand/Search?keyword=" + data + "&callback=?"
 *       });
 *   }).progress(function (state) {//可选
 *       console.log("进度：" + state.progress + "/" + state.total);
 *   }).done(function (state) {//可选
 *       console.log("完成,成功：" + state.success + "，失败：" + state.error + "！");
 *   }).run();
 *
 *
 *   //方式2：完全模式
 *   JQEUI.task({
 *       args: ["a", "b", "c"],
 *       onRun: function (data, index) {
 *           return $.ajax({
 *               url: index == 1 ? "http://a.com" : "http://pms.tidebuy.net/Api/Brand/Search?keyword=" + data + "&callback=?"
 *           });
 *       }
 *       , interval: 1000
 *       //, dialog: true
 *       , dialog: {
 *           formatter: function (state) {
 *               return state.progress + ". 执行任务" + state.index + " [搜索“" + state.arg + "”]：" + (state.data ? state.data.Message : "失败!");
 *           }
 *       }
 *   }).progress(function (state) {//可选
 *       console.log("进度：" + state.progress + "/" + state.total);
 *   }).done(function (state) {//可选
 *       console.log("完成,成功：" + state.success + "，失败：" + state.error + "！");
 *   }).run();
 *
 *
 *
 *   //方式3：完全模式 (推荐方法)
 *   JQEUI.task({
 *       args: ["a", "b", "c"],
 *       onRun: function (data, index) {
 *           return $.ajax({
 *               url: index == 1 ? "http://a.com" : "http://pms.tidebuy.net/Api/Brand/Search?keyword=" + data + "&callback=?"
 *           });
 *       },
 *       onSuccess:function(state){ console.log("成功：" + state.success + "个！"); },
 *       onError:function(state){ console.log("失败：" + state.error + "个！"); },
 *       onComplete:function(state){ console.log("完成,成功：" + state.success + "个，失败：" + state.error + "个！"); },
 *       onProgress:function(state){ console.log("进度：" + state.progress + "/" + state.total); },
 *       interval: 1000, 
 *       dialog: {
 *           formatter: function (state) {
 *               return state.progress + ". 执行任务" + state.index + " [搜索“" + state.arg + "”]：" + (state.data ? state.data.Message : "失败!");
 *           }
 *       }
 *   }).run();
 *
 * -----------------------------------------------------------------------------------------------------------------------
 *  说明：
 *  
 *    以上示例中的state:
 *    {
 *      status: '',   //任务状态
 *      total: 0,     //总任务数
 *      index: 0,     //当前任务索引
 *      data: {},     //服务器返回的当前任务的数据
 *      arg: {},      //传入ajax的data参数
 *      progress: 0   //处理进度
 *      success:0,    //已成功数量
 *      error:0       //已失败数量
 *      datas：       //服务器返回的所有数据
 *    }
 */
